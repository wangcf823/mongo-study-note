回调API：
  启动事务，执行指定的操作，并提交（或在错误时中止）。
  自动合并“TransientTransactionError”和"UnknownTransactionCommitResult"的错误处理逻辑。
  
核心API：
  需要显式调用以启动事务并提交事务。
  不合并“TransientTransactionError”和“UnknownTransactionCommitResult”的错误处理逻辑，而是提供了为这些错误合并自定义错误处理的灵活性。
  
Callback API
回调API包含逻辑：
  如果事务遇到“TransientTransactionError”，则整个事务重试。
  如果提交遇到“UnknownTransactionCommitResult”，请重试提交操作。
  
IMPORTANT
  推荐。使用为MongoDB部署版本更新的MongoDB驱动程序。对于MongoDB 4.2部署（副本集和分片群集）上的事务，客户端必须使用为MongoDB 4.2更新的MongoDB驱动程序。
  使用驱动程序时，事务中的每个操作都必须与会话关联（即，将会话传递给每个操作）。
  事务中的操作使用事务级读关注点、事务级写关注点和事务级读首选项。Operations in a transaction use transaction-level read concern, transaction-level write concern, and transaction-level read preference.
  在MongoDB 4.2及更早版本中，您不能在事务中创建集合。如果在事务内部运行，则导致文档插入的写入操作（例如，带有upsert: true的插入或更新操作）必须在现有集合上。
  从MongoDB 4.4开始，您可以隐式或显式地在事务中创建集合。但是，您必须使用为4.4更新的MongoDB驱动程序。有关详细信息，请参见在事务中创建集合和索引。
  
 该示例使用新的回调API来处理事务，该API启动事务，执行指定的操作，并提交（或在错误时中止）。新的回调API包含了“TransientTransactionError”或“未知事务提交结果”提交错误的重试逻辑。
 
 python
 # For a replica set, include the replica set name and a seedlist of the members in the URI string; e.g.
# uriString = 'mongodb://mongodb0.example.com:27017,mongodb1.example.com:27017/?replicaSet=myRepl'
# For a sharded cluster, connect to the mongos instances; e.g.
# uriString = 'mongodb://mongos0.example.com:27017,mongos1.example.com:27017/'
client = MongoClient(uriString)
wc_majority = WriteConcern("majority", wtimeout=1000)
# Prereq: Create collections.
client.get_database("mydb1", write_concern=wc_majority).foo.insert_one({"abc": 0})
client.get_database("mydb2", write_concern=wc_majority).bar.insert_one({"xyz": 0})
# Step 1: Define the callback that specifies the sequence of operations to perform inside the transactions.
def callback(session):
    collection_one = session.client.mydb1.foo
    collection_two = session.client.mydb2.bar
    # Important:: You must pass the session to the operations.
    collection_one.insert_one({"abc": 1}, session=session)
    collection_two.insert_one({"xyz": 999}, session=session)
# Step 2: Start a client session.
with client.start_session() as session:
    # Step 3: Use with_transaction to start a transaction, execute the callback, and commit (or abort on error).
    session.with_transaction(
        callback,
        read_concern=ReadConcern("local"),
        write_concern=wc_majority,
        read_preference=ReadPreference.PRIMARY,
    )
    
    
 核心API
 核心事务API不包含标记为以下错误的重试逻辑：
"TransientTransactionError"。如果事务中的操作返回错误，标记为"TransientTransactionError",可以重试整个事务。要处理“TransientTransactionError”，应用程序应显式包含错误的重试逻辑。
"UnknownTransactionCommitResult". 如果提交返回标记为“未知事务提交结果”的错误，则可以重试提交。
要处理“未知事务提交结果”，应用程序应显式合并错误的重试逻辑。

Example
以下示例包含了针对暂时错误重试事务的逻辑，并针对未知提交错误重试提交的逻辑：
IMPORTANT
要将读和写操作与事务关联，必须将会话传递给事务中的每个操作。

def run_transaction_with_retry(txn_func, session):
    while True:
        try:
            txn_func(session)  # performs transaction
            break
        except (ConnectionFailure, OperationFailure) as exc:
            # If transient error, retry the whole transaction
            if exc.has_error_label("TransientTransactionError"):
                print("TransientTransactionError, retrying " "transaction ...")
                continue
            else:
                raise
def commit_with_retry(session):
    while True:
        try:
            # Commit uses write concern set at transaction start.
            session.commit_transaction()
            print("Transaction committed.")
            break
        except (ConnectionFailure, OperationFailure) as exc:
            # Can retry commit
            if exc.has_error_label("UnknownTransactionCommitResult"):
                print("UnknownTransactionCommitResult, retrying " "commit operation ...")
                continue
            else:
                print("Error during commit ...")
                raise
# Updates two collections in a transactions
def update_employee_info(session):
    employees_coll = session.client.hr.employees
    events_coll = session.client.reporting.events
    with session.start_transaction(
        read_concern=ReadConcern("snapshot"),
        write_concern=WriteConcern(w="majority"),
        read_preference=ReadPreference.PRIMARY,
    ):
        employees_coll.update_one(
            {"employee": 3}, {"$set": {"status": "Inactive"}}, session=session
        )
        events_coll.insert_one(
            {"employee": 3, "status": {"new": "Inactive", "old": "Active"}}, session=session
        )
        commit_with_retry(session)
# Start a session.
with client.start_session() as session:
    try:
        run_transaction_with_retry(update_employee_info, session)
    except Exception as exc:
        # Do something with error.
        raise
        
事务错误处理
无论数据库系统是什么，无论是MongoDB还是关系数据库，应用程序都应该采取措施处理事务提交期间的错误，并为事务合并重试逻辑。
"TransientTransactionError"
无论重试写入的值如何，事务中的单个写入操作都是不可重试的。如果操作遇到与标签“TransientTransactionError”关联的错误，例如当主退出时，可以重试整个事务。
    回调API包含了“TransientTransactionError”的重试逻辑。
    核心事务API没有包含“TransientTransactionError”的重试逻辑。要处理“TransientTransactionError”，应用程序应显式包含错误的重试逻辑。
    
"UnknownTransactionCommitResult"
提交操作是可重试的写入操作。如果提交操作遇到错误，MongoDB驱动程序将重试提交，而不管 retryWrites的值如何。
如果提交操作遇到标记为“未知事务提交结果”的错误，则可以重试提交。
    回调API包含了“未知事务提交结果”的重试逻辑。
    核心事务API没有包含“未知事务提交结果”的重试逻辑。要处理“未知事务提交结果”，应用程序应显式合并错误的重试逻辑。
    
Driver Version Errors
在具有多个mongos实例的分片群集上，使用为MongoDB 4.0（而不是MongoDB 4.2）更新的驱动程序执行事务将失败，并可能导致错误，包括：
NOTE
您的驱动程序可能会返回不同的错误。有关详细信息，请参阅驱动程序文档。
Error Code   Error Message
251          cannot continue txnId -1 for session ... with txnId 1
50940        cannot commit with no participants

Additional Information
mongo Shell Example
以下mongo shell方法可用于事务：
Session.startTransaction()
Session.commitTransaction()
Session.abortTransaction()

NOTE
mongo shell示例为了简单起见，省略了重试逻辑和健壮的错误处理。有关在应用程序中合并事务的更实用示例，请参见事务错误处理。
// Create collections:
db.getSiblingDB("mydb1").foo.insert( {abc: 0}, { writeConcern: { w: "majority", wtimeout: 2000 } } );
db.getSiblingDB("mydb2").bar.insert( {xyz: 0}, { writeConcern: { w: "majority", wtimeout: 2000 } } );
// Start a session.
session = db.getMongo().startSession( { readPreference: { mode: "primary" } } );
coll1 = session.getDatabase("mydb1").foo;
coll2 = session.getDatabase("mydb2").bar;
// Start a transaction
session.startTransaction( { readConcern: { level: "local" }, writeConcern: { w: "majority" } } );
// Operations inside the transaction
try {
   coll1.insertOne( { abc: 1 } );
   coll2.insertOne( { xyz: 999 } );
} catch (error) {
   // Abort transaction on error
   session.abortTransaction();
   throw error;
}
// Commit the transaction using write concern set at transaction start
session.commitTransaction();
session.endSession();


