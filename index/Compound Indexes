MongoDB supports compound indexes, where a single index structure holds references to multiple fields [1] within a collection's documents. The following diagram illustrates an example of a compound index on two fields:
MongoDB支持复合索引，其中单个索引结构保存对集合文档中多个字段【1】的引用。下图说明了两个字段上的复合索引示例：
MongoDB对任何复合索引施加了32个字段的限制。
Compound indexes can support queries that match on multiple fields.
复合索引可以支持在多个字段上匹配的查询。

Create a Compound Index
To create a compound index use an operation that resembles the following prototype:
要创建复合索引，请使用类似于以下原型的操作：
db.collection.createIndex( { <field1>: <type>, <field2>: <type2>, ... } )
The value of the field in the index specification describes the kind of index for that field. For example, a value of 1 specifies an index that orders items in ascending order. A value of -1 specifies an index that orders items in descending order. For additional index types, see index types.
索引规范中字段的值描述了该字段的索引类型。例如，值1指定按升序对项目排序的索引。值-1指定按降序对项目排序的索引。有关其他索引类型，请参见索引类型。

Consider a collection named products that holds documents that resemble the following document:
考虑一个名为产品的集合，该集合包含类似以下文档的文档：
{
 "_id": ObjectId(...),
 "item": "Banana",
 "category": ["food", "produce", "grocery"],
 "location": "4th Street Store",
 "stock": 4,
 "type": "cases"
}
The following operation creates an ascending index on the item and stock fields:
以下操作在物料和库存字段上创建升序索引：
db.products.createIndex( { "item": 1, "stock": 1 } )

The order of the fields listed in a compound index is important. The index will contain references to documents sorted first by the values of the item field and, within each value of the item field, sorted by values of the stock field. See Sort Order for more information.
复合索引中列出的字段的顺序很重要。索引将包含对文档的引用，首先按项目字段的值排序，并在项目字段的每个值中按库存字段的值排序。有关详细信息，请参见排序顺序
In addition to supporting queries that match on all the index fields, compound indexes can support queries that match on the prefix of the index fields. That is, the index supports queries on the item field as well as both item and stock fields:
除了支持在所有索引字段上匹配的查询外，复合索引还可以支持在索引字段前缀上匹配的查询。也就是说，索引支持对物料字段以及物料和库存字段的查询：
db.products.find( { item: "Banana" } )
db.products.find( { item: "Banana", stock: { $gt: 5 } } )

Sort Order
Indexes store references to fields in either ascending (1) or descending (-1) sort order. For single-field indexes, the sort order of keys doesn't matter because MongoDB can traverse the index in either direction. However, for compound indexes, sort order can matter in determining whether the index can support a sort operation.
Consider a collection events that contains documents with the fields username and date. Applications can issue queries that return results sorted first by ascending username values and then by descending (i.e. more recent to last) date values, such as:
db.events.find().sort( { username: 1, date: -1 } )
or queries that return results sorted first by descending username values and then by ascending date values, such as:
db.events.find().sort( { username: -1, date: 1 } )
The following index can support both these sort operations:
db.events.createIndex( { "username" : 1, "date" : -1 } )
However, the above index cannot support sorting by ascending username values and then by ascending date values, such as the following:
db.events.find().sort( { username: 1, date: 1 } )

Prefixes
Index prefixes are the beginning subsets of indexed fields. For example, consider the following compound index:
索引前缀是索引字段的开始子集。例如，考虑以下复合索引：
{ "item": 1, "location": 1, "stock": 1 }
The index has the following index prefixes:
索引具有以下索引前缀：
{ item: 1 }
{ item: 1, location: 1 }
For a compound index, MongoDB can use the index to support queries on the index prefixes. As such, MongoDB can use the index for queries on the following fields:
对于复合索引，MongoDB可以使用索引来支持对索引前缀的查询。因此，MongoDB可以使用索引对以下字段进行查询：
the item field,
the item field and the location field,
the item field and the location field and the stock field.












