本文档介绍如何使用连接池管理应用与MongoDB实例之间的连接。
连接池是一个开放的、现成的数据库连接的缓存，由驱动维持。您的应用程序可以无缝地从池获取连接、执行操作，并将连接返回到池。连接池是线程安全的。

连接池的优点
连接池有助于降低应用程序延迟和创建新连接的次数。
连接池在启动时创建连接。应用程序不需要手动将连接返回到池。相反，连接会自动返回到池。
有些连接处于活动状态，有些连接处于非活动状态，但可用。如果应用程序请求连接，并且池中有可用连接，则不需要创建新连接。

创建和使用连接池
大多数驱动提供了一个mongoclient类型的对象
每个应用程序使用一个mongoclient实例，除非应用程序连接到多个独立的集群。当mongoclient创建后，每个mongoclient实例
管理自己的连接池到mongodb集群或者指定的节点。在大多数驱动中，mongoclient对象是线程安全的。

存储您的MongoClient实例位于应用程序可全局访问的位置。

分片集群连接池
mongos路由对于集群中的每个节点都有连接池。可用连接到分片集群中的单个节点会影响延时。操作必须等待连接建立完成。

连接池配置设置
1、通过mongodb uri
2、以编程方式构建MongoClient实例
3、或在应用程序框架的配置文件中

有一些参数设置，参考连接：
https://www.mongodb.com/docs/v4.4/administration/connection-pool-overview/

计算最大连接数
考虑四个应用程序服务器连接到一个具有三个成员的副本集。在此场景中，四个应用程序服务器中的每一个都为每个副本集成员创建一个连接池。
计算每个应用服务器打开的最大连接数，将maxPoolSize乘以成员数。
计算从应用程序到三人副本集的传出连接：
100 (maxPoolSize 默认值 100) x 3 (replica set members) = 300 (outgoing connections from the application).
计算从四个应用程序服务器到副本集的传入连接：
100 (maxPoolSize 默认值 100) x 4 (application servers) = 400 (incoming connections to each mongod).




















